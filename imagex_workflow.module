<?php
/**
 * @file
 * Code for the imagex_workflow feature.
 */

include_once 'imagex_workflow.features.inc';
// Forced the inclusion of the workbench_moderation states and transitions
// as they are not auto-included during site install feature building using the
// `features_include_defaults` function as the component is not recognized as includable.
// If these files are not included, the foreach loop in `workbench_moderation_states_features_rebuild`
// presents a warning due to `$defaults` equalling false.
include_once 'imagex_workflow.features.workbench_moderation_states.inc';
include_once 'imagex_workflow.features.workbench_moderation_transitions.inc';

/**
 * Implements hook_date_popup_pre_validate_alter().
 *
 * Assists in providing a default time for scheduler's publish_on and unpublish_on
 * fields should only a date be presented. The date_popup api will present a form error
 * should only the date be present and not the time during validation.
 */
function imagex_workflow_date_popup_pre_validate_alter(&$element, &$form_state, &$input) {
  if (in_array($element['#name'], array('publish_on', 'unpublish_on')) && isset($form_state['values'][$element['#name']])) {
    if (!empty($form_state['values'][$element['#name']]['date']) && empty($form_state['values'][$element['#name']]['time'])) {
      $form_state['values'][$element['#name']]['time'] = '00:00:00';
    }
    $input = $form_state['values'][$element['#name']];
  }
}

/**
 * Implements hook_form_alter().
 */
function imagex_workflow_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'workbench_access_section_form') {
    $form['#submit'][] = 'imagex_workflow_workbench_submit';
  }
}

/**
 * @param $form
 * @param $form_state
 */
function imagex_workflow_workbench_submit(&$form, &$form_state) {
  if (!empty($form_state['input']['sections']) && db_table_exists('workbench_access_user')) {
    foreach ($form_state['input']['sections']['workbench_section'] as $key => $row) {
      if (!empty($row)) {
        db_merge('workbench_access_user')
          ->key(array('access_id' => $key))
          ->fields(array(
            'uid' => 1,
            'access_scheme' => 'taxonomy',
          ))
          ->execute();
      }
      else {
        db_delete('workbench_access_user')
          ->condition('uid', 1)
          ->condition('access_id', $key)
          ->execute();
      }
    }
  }
}

/*
 * Implementation of hook_views_default_views_alter().
 */
function imagex_workflow_views_default_views_alter(&$views) {
  // Alter only the 'admin_views_node' view.
  if (array_key_exists('admin_views_node', $views)) {
    /* Display: Defaults */
    $handler =& $views['admin_views_node']->display['default'];
    /* Filter criterion: Workbench Moderation: State */
    $handler->display_options['filters']['state']['id'] = 'state';
    $handler->display_options['filters']['state']['table'] = 'workbench_moderation_node_history';
    $handler->display_options['filters']['state']['field'] = 'state';
    $handler->display_options['filters']['state']['exposed'] = TRUE;
    $handler->display_options['filters']['state']['expose']['operator_id'] = 'state_op';
    $handler->display_options['filters']['state']['expose']['label'] = 'State';
    $handler->display_options['filters']['state']['expose']['operator'] = 'state_op';
    $handler->display_options['filters']['state']['expose']['identifier'] = 'state';
    $handler->display_options['filters']['state']['expose']['remember_roles'] = array(
      2 => '2',
      1 => 0,
      3 => 0,
      7 => 0,
      5 => 0,
      6 => 0,
      4 => 0,
      8 => 0,
    );
    /* Filter criterion: Workbench Moderation: Current */
    $handler->display_options['filters']['current']['id'] = 'current';
    $handler->display_options['filters']['current']['table'] = 'workbench_moderation_node_history';
    $handler->display_options['filters']['current']['field'] = 'current';
    $handler->display_options['filters']['current']['value'] = '1';
    $handler->display_options['filters']['current']['exposed'] = TRUE;
    $handler->display_options['filters']['current']['expose']['operator_id'] = '';
    $handler->display_options['filters']['current']['expose']['label'] = 'Current revision';
    $handler->display_options['filters']['current']['expose']['operator'] = 'current_op';
    $handler->display_options['filters']['current']['expose']['identifier'] = 'current';
    $handler->display_options['filters']['current']['expose']['required'] = TRUE;
  }
}
